# DIABETES RISK PREDICTION WEBSITE - COMPLETE DOCUMENTATION

## TABLE OF CONTENTS
1. PROJECT OVERVIEW
2. FRONTEND STRUCTURE & COMPONENTS
3. BACKEND SETUP & INTEGRATION
4. ML MODEL INTEGRATION
5. API CONNECTION
6. STEP-BY-STEP SETUP GUIDE
7. TROUBLESHOOTING
8. DEVELOPMENT WORKFLOW

================================================================================
## 1. PROJECT OVERVIEW
================================================================================

This is a Type 2 Diabetes Risk Prediction website built with:
- **Frontend**: React + TypeScript + Tailwind CSS + Vite
- **Backend**: Flask (Python) 
- **ML Integration**: Scikit-learn compatible models (.pkl files)
- **Charts**: Recharts library for data visualization
- **Forms**: React Hook Form for form handling
- **Icons**: Lucide React

### CURRENT STATUS:
✅ Frontend: 100% Complete (5 pages, all components ready)
❌ Backend: Not created yet (needs Flask app)
❌ ML Model: Not integrated yet (needs your .pkl file)
❌ API Connection: Partially ready (needs backend URL)

### WORKFLOW:
User fills form → React sends data → Flask backend → ML model predicts → Results displayed

================================================================================
## 2. FRONTEND STRUCTURE & COMPONENTS
================================================================================

### 2.1 PAGE STRUCTURE
```
src/
├── pages/
│   ├── Index.tsx          # Home page redirect
│   ├── Landing.tsx        # Main landing page (/)
│   ├── Demo.tsx           # Risk prediction form (/demo)
│   ├── Research.tsx       # Research methodology (/research)
│   ├── Results.tsx        # Model performance (/results)
│   └── About.tsx          # About page (/about)
```

### 2.2 COMPONENT BREAKDOWN

#### A) LAYOUT COMPONENTS
- **Navigation.tsx**: Top navigation bar with links to all pages
- **Footer.tsx**: Footer with links and copyright

#### B) DEMO COMPONENTS (Main Functionality)
- **InputForm.tsx**: 
  - Main form with 12 health input fields
  - Age slider (18-100)
  - Gender radio buttons
  - BMI, glucose, HbA1c, blood pressure inputs
  - Cholesterol, triglycerides inputs
  - Family history, smoking checkboxes
  - Activity level slider (1-5)
  - Form validation using React Hook Form

- **ResultsPanel.tsx**:
  - Displays prediction results from ML model
  - Risk score as circular progress ring
  - Risk level (Low/Medium/High) with color coding
  - Timeline prediction chart (1, 5, 10 years)
  - Top contributing factors
  - Personalized recommendations

- **RiskVisualization.tsx**:
  - Circular progress component for risk display
  - Color-coded based on risk level

#### C) CHART COMPONENTS
- **ROCCurve.tsx**: ROC curve visualization
- **FeatureImportance.tsx**: Feature importance bar chart
- **ConfusionMatrix.tsx**: Confusion matrix heatmap
- **ModelComparison.tsx**: Model comparison chart

### 2.3 CURRENT DEMO FUNCTIONALITY
The Demo page (`/demo`) currently:
- Shows complete input form (left panel)
- Has mock prediction that generates random results (right panel)
- Displays loading states and error handling
- **NEEDS**: Real API connection to Flask backend

================================================================================
## 3. BACKEND SETUP & INTEGRATION
================================================================================

### 3.1 BACKEND REQUIREMENTS
You need to create a Flask backend with these files:

```
backend/
├── app.py                 # Main Flask application
├── requirements.txt       # Python dependencies
├── models/
│   ├── diabetes_model.pkl # Your trained ML model (YOU ADD THIS)
│   └── README.md         # Model integration instructions
├── utils/
│   └── model_utils.py    # Helper functions for model
└── config.py             # Configuration settings
```

### 3.2 REQUIRED PYTHON PACKAGES
Create `backend/requirements.txt`:
```
Flask==2.3.3
Flask-CORS==4.0.0
scikit-learn==1.3.0
pandas==2.0.3
numpy==1.24.3
joblib==1.3.2
```

### 3.3 FLASK APPLICATION STRUCTURE
The Flask app needs these endpoints:

1. **POST /api/predict**
   - Accepts form data from frontend
   - Processes data for ML model
   - Returns prediction results

2. **GET /api/model/info**
   - Returns model status and information

3. **GET /api/health**
   - Health check endpoint

================================================================================
## 4. ML MODEL INTEGRATION
================================================================================

### 4.1 MODEL REQUIREMENTS
Your ML model MUST:
- Be a scikit-learn compatible model
- Have `.predict_proba()` method for probability predictions
- Be saved as a .pkl file using joblib
- Accept 12 features in this EXACT order:

```python
feature_order = [
    'age',              # Age in years (18-100)
    'bmi',              # Body Mass Index (calculated or input)
    'glucose',          # Fasting glucose (mg/dL)
    'hba1c',            # HbA1c percentage
    'systolic_bp',      # Systolic blood pressure (mmHg)
    'diastolic_bp',     # Diastolic blood pressure (mmHg)
    'cholesterol',      # Total cholesterol (mg/dL)
    'triglycerides',    # Triglycerides (mg/dL)
    'activity_level',   # Activity level (1-5 scale)
    'family_history',   # Family history (1 for yes, 0 for no)
    'smoking',          # Smoking status (1 for yes, 0 for no)
    'gender_male'       # Gender (1 for male, 0 for female)
]
```

### 4.2 HOW TO SAVE YOUR MODEL
If you have a trained model, save it like this:
```python
import joblib
import pandas as pd

# Assuming you have a trained model called 'model'
joblib.dump(model, 'backend/models/diabetes_model.pkl')

# Test loading
loaded_model = joblib.load('backend/models/diabetes_model.pkl')
print("Model loaded successfully!")
```

### 4.3 EXPECTED MODEL OUTPUT
Your model should output probabilities where:
- `model.predict_proba(X)[0][0]` = Probability of NO diabetes
- `model.predict_proba(X)[0][1]` = Probability of diabetes (this is used as risk score)

================================================================================
## 5. API CONNECTION
================================================================================

### 5.1 CURRENT API IMPLEMENTATION
The frontend (`src/pages/Demo.tsx`) currently has:
- **Lines 62-64**: Mock prediction (needs replacement)
- **Lines 67-87**: Mock result generation (needs replacement)

### 5.2 WHAT NEEDS TO BE CHANGED
Replace the mock prediction with real API call:

```typescript
// CURRENT (Lines 62-64 in Demo.tsx):
await new Promise(resolve => setTimeout(resolve, 2000));

// NEEDS TO BECOME:
const response = await fetch('http://localhost:5000/api/predict', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify(data),
});
const result = await response.json();
```

### 5.3 EXPECTED API REQUEST FORMAT
Frontend sends this JSON to `/api/predict`:
```json
{
  "age": 45,
  "gender": "male",
  "bmi": 28.5,
  "glucose": 110,
  "hba1c": 6.2,
  "systolic_bp": 140,
  "diastolic_bp": 90,
  "cholesterol": 200,
  "triglycerides": 150,
  "family_history": true,
  "smoking": false,
  "activity_level": 3
}
```

### 5.4 EXPECTED API RESPONSE FORMAT
Backend should return this JSON:
```json
{
  "risk_score": 0.73,
  "risk_level": "high",
  "confidence": 0.89,
  "timeline": [
    {"years": 1, "risk": 0.65},
    {"years": 5, "risk": 0.73},
    {"years": 10, "risk": 0.82}
  ],
  "top_factors": [
    {"factor": "BMI", "impact": 0.25},
    {"factor": "HbA1c", "impact": 0.22},
    {"factor": "Age", "impact": 0.18}
  ],
  "recommendations": [
    "Consider weight management program",
    "Monitor blood sugar levels regularly",
    "Consult healthcare provider"
  ],
  "timestamp": "2024-01-15T10:30:00Z"
}
```

================================================================================
## 6. STEP-BY-STEP SETUP GUIDE
================================================================================

### STEP 1: VERIFY FRONTEND IS WORKING
1. Make sure you're in the project directory
2. Run: `npm install` (if not already done)
3. Run: `npm run dev`
4. Open: `http://localhost:5173`
5. Navigate to `/demo` page
6. Fill out the form and click "Get Risk Prediction"
7. You should see mock results (random data)

### STEP 2: CREATE BACKEND DIRECTORY
1. In your project root, create: `mkdir backend`
2. Navigate to backend: `cd backend`
3. Create Python virtual environment: `python -m venv venv`
4. Activate environment:
   - Windows: `venv\Scripts\activate`
   - Mac/Linux: `source venv/bin/activate`

### STEP 3: INSTALL PYTHON DEPENDENCIES
1. Create `requirements.txt` with the packages listed in section 3.2
2. Install: `pip install -r requirements.txt`

### STEP 4: CREATE FLASK APPLICATION
Create `backend/app.py`:

```python
from flask import Flask, request, jsonify
from flask_cors import CORS
import joblib
import pandas as pd
import numpy as np
from datetime import datetime
import os

app = Flask(__name__)
CORS(app)  # Enable CORS for frontend connection

# Global variables
model = None
MODEL_PATH = 'models/diabetes_model.pkl'

def load_model():
    """Load the ML model from file"""
    global model
    if os.path.exists(MODEL_PATH):
        try:
            model = joblib.load(MODEL_PATH)
            print("✅ Model loaded successfully!")
            return True
        except Exception as e:
            print(f"❌ Error loading model: {e}")
            return False
    else:
        print("❌ Model file not found. Please add your model to models/diabetes_model.pkl")
        return False

def preprocess_data(form_data):
    """Convert form data to model input format"""
    try:
        # Create DataFrame with the exact features your model expects
        processed_data = {
            'age': form_data.get('age', 0),
            'bmi': form_data.get('bmi', 0),
            'glucose': form_data.get('glucose', 0),
            'hba1c': form_data.get('hba1c', 0),
            'systolic_bp': form_data.get('systolic_bp', 0),
            'diastolic_bp': form_data.get('diastolic_bp', 0),
            'cholesterol': form_data.get('cholesterol', 0),
            'triglycerides': form_data.get('triglycerides', 0),
            'activity_level': form_data.get('activity_level', 0),
            'family_history': 1 if form_data.get('family_history', False) else 0,
            'smoking': 1 if form_data.get('smoking', False) else 0,
            'gender_male': 1 if form_data.get('gender', '') == 'male' else 0
        }
        
        # Convert to DataFrame
        df = pd.DataFrame([processed_data])
        
        # Ensure correct column order (CRITICAL!)
        feature_columns = [
            'age', 'bmi', 'glucose', 'hba1c', 'systolic_bp', 'diastolic_bp',
            'cholesterol', 'triglycerides', 'activity_level', 'family_history',
            'smoking', 'gender_male'
        ]
        
        return df[feature_columns]
    
    except Exception as e:
        print(f"❌ Error preprocessing data: {e}")
        return None

def generate_timeline(base_risk, age):
    """Generate risk timeline for 1, 5, 10 years"""
    timeline = []
    for years in [1, 5, 10]:
        # Simple age-based risk progression
        age_factor = 1 + (years * 0.02)  # 2% increase per year
        future_risk = min(base_risk * age_factor, 1.0)
        timeline.append({
            'years': years,
            'risk': round(future_risk, 3)
        })
    return timeline

def get_top_factors(form_data):
    """Identify top contributing factors"""
    factors = []
    
    # BMI factor
    bmi = form_data.get('bmi', 0)
    if bmi > 30:
        factors.append({'factor': 'BMI', 'impact': 0.3})
    elif bmi > 25:
        factors.append({'factor': 'BMI', 'impact': 0.2})
    
    # HbA1c factor
    hba1c = form_data.get('hba1c', 0)
    if hba1c > 6.5:
        factors.append({'factor': 'HbA1c', 'impact': 0.25})
    elif hba1c > 6.0:
        factors.append({'factor': 'HbA1c', 'impact': 0.15})
    
    # Age factor
    age = form_data.get('age', 0)
    if age > 60:
        factors.append({'factor': 'Age', 'impact': 0.2})
    elif age > 45:
        factors.append({'factor': 'Age', 'impact': 0.15})
    
    # Blood pressure
    systolic = form_data.get('systolic_bp', 0)
    if systolic > 140:
        factors.append({'factor': 'Blood Pressure', 'impact': 0.18})
    
    # Family history
    if form_data.get('family_history', False):
        factors.append({'factor': 'Family History', 'impact': 0.15})
    
    # Sort by impact and return top 3
    factors.sort(key=lambda x: x['impact'], reverse=True)
    return factors[:3]

def generate_recommendations(risk_level, form_data):
    """Generate personalized recommendations"""
    recommendations = []
    
    if form_data.get('bmi', 0) > 25:
        recommendations.append("Consider weight management program")
    
    if form_data.get('activity_level', 0) < 3:
        recommendations.append("Increase physical activity to 150 minutes per week")
    
    if form_data.get('hba1c', 0) > 6.0:
        recommendations.append("Regular blood sugar monitoring recommended")
    
    if form_data.get('smoking', False):
        recommendations.append("Consider smoking cessation program")
    
    if risk_level == 'high':
        recommendations.append("Consult healthcare provider for comprehensive evaluation")
    elif risk_level == 'medium':
        recommendations.append("Schedule regular health check-ups")
    else:
        recommendations.append("Maintain current healthy lifestyle")
    
    return recommendations

@app.route('/api/predict', methods=['POST'])
def predict():
    """Main prediction endpoint"""
    try:
        # Check if model is loaded
        if model is None:
            return jsonify({
                'error': 'Model not loaded. Please add your trained model to models/diabetes_model.pkl'
            }), 500
        
        # Get form data
        form_data = request.get_json()
        if not form_data:
            return jsonify({'error': 'No data provided'}), 400
        
        # Preprocess data
        processed_data = preprocess_data(form_data)
        if processed_data is None:
            return jsonify({'error': 'Error processing input data'}), 400
        
        # Make prediction
        prediction_proba = model.predict_proba(processed_data)[0]
        risk_score = prediction_proba[1]  # Probability of diabetes
        
        # Determine risk level
        if risk_score < 0.3:
            risk_level = 'low'
        elif risk_score < 0.7:
            risk_level = 'medium'
        else:
            risk_level = 'high'
        
        # Generate response
        response = {
            'risk_score': round(risk_score, 3),
            'risk_level': risk_level,
            'confidence': round(max(prediction_proba), 3),
            'timeline': generate_timeline(risk_score, form_data.get('age', 45)),
            'top_factors': get_top_factors(form_data),
            'recommendations': generate_recommendations(risk_level, form_data),
            'timestamp': datetime.now().isoformat()
        }
        
        return jsonify(response)
    
    except Exception as e:
        print(f"❌ Prediction error: {e}")
        return jsonify({'error': f'Prediction failed: {str(e)}'}), 500

@app.route('/api/model/info', methods=['GET'])
def model_info():
    """Get model information"""
    return jsonify({
        'model_loaded': model is not None,
        'model_path': MODEL_PATH,
        'status': 'ready' if model else 'model_not_found'
    })

@app.route('/api/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat()
    })

if __name__ == '__main__':
    print("🚀 Starting Flask server...")
    
    # Try to load model
    load_model()
    
    # Start server
    app.run(debug=True, host='0.0.0.0', port=5000)
```

### STEP 5: ADD YOUR ML MODEL
1. Create directory: `mkdir backend/models`
2. Copy your trained model file to: `backend/models/diabetes_model.pkl`
3. Make sure your model accepts the 12 features in the exact order specified

### STEP 6: UPDATE FRONTEND API CALL
1. Open `src/pages/Demo.tsx`
2. Find lines 62-64 (the mock prediction)
3. Replace with:

```typescript
const response = await fetch('http://localhost:5000/api/predict', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify(data),
});

if (!response.ok) {
  throw new Error(`HTTP error! status: ${response.status}`);
}

const result = await response.json();
setResult(result);
```

4. Remove the mock result generation (lines 67-87)

### STEP 7: TEST THE COMPLETE SYSTEM
1. Start backend: `cd backend && python app.py`
2. Start frontend: `npm run dev` (in project root)
3. Open `http://localhost:5173/demo`
4. Fill form and test prediction

================================================================================
## 7. TROUBLESHOOTING
================================================================================

### COMMON ISSUES:

#### 1. "Model not loaded" Error
- **Problem**: Flask can't find your model file
- **Solution**: Ensure `backend/models/diabetes_model.pkl` exists and is a valid joblib file

#### 2. CORS Errors
- **Problem**: Frontend can't connect to backend
- **Solution**: Ensure `flask-cors` is installed and CORS(app) is in Flask code

#### 3. Feature Mismatch
- **Problem**: Model expects different features
- **Solution**: Update the `feature_columns` list in `preprocess_data()` function

#### 4. Prediction Errors
- **Problem**: Model fails to make predictions
- **Solution**: Check that your model has `.predict_proba()` method and accepts the correct input format

#### 5. Network Connection Failed
- **Problem**: Frontend can't reach backend
- **Solution**: Ensure Flask is running on port 5000 and firewall allows connections

### DEBUGGING STEPS:
1. Check Flask console for error messages
2. Check browser console for network errors
3. Test API endpoints directly using curl or Postman
4. Verify model loading with: `curl http://localhost:5000/api/model/info`

================================================================================
## 8. DEVELOPMENT WORKFLOW
================================================================================

### DAILY DEVELOPMENT:
1. Activate Python environment: `source backend/venv/bin/activate`
2. Start Flask: `cd backend && python app.py`
3. Start React: `npm run dev`
4. Open: `http://localhost:5173`

### MAKING CHANGES:
- **Frontend changes**: Edit files in `src/`, changes auto-reload
- **Backend changes**: Edit `backend/app.py`, restart Flask server
- **Model changes**: Replace `backend/models/diabetes_model.pkl`, restart Flask

### DEPLOYMENT PREPARATION:
1. Test all pages work correctly
2. Verify API endpoints return correct data
3. Check that model predictions are accurate
4. Ensure error handling works properly

### PRODUCTION CONSIDERATIONS:
- Use environment variables for configuration
- Add proper logging
- Implement rate limiting
- Add authentication if needed
- Use production WSGI server (not Flask dev server)

================================================================================
## FINAL NOTES
================================================================================

### WHAT'S ALREADY DONE:
✅ Complete React frontend with 5 pages
✅ Responsive design with Tailwind CSS
✅ Form validation and error handling
✅ Chart components for data visualization
✅ Professional medical theme
✅ Mock prediction system (for testing)

### WHAT YOU NEED TO DO:
1. Create Flask backend (follow Step 4 above)
2. Add your trained ML model (.pkl file)
3. Update frontend API call (follow Step 6 above)
4. Test the complete system

### SUPPORT:
- All frontend code is complete and tested
- Backend code template is provided above
- Model integration instructions are detailed
- Troubleshooting guide covers common issues

The system is designed to be modular, so you can:
- Replace the ML model easily
- Modify the prediction logic
- Add new features
- Customize the UI

Good luck with your diabetes prediction website! 🚀